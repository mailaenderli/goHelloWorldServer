pipeline:
    name: CI Pipeline
    identifier: CI_Pipeline
    allowStageExecutions: false
    projectIdentifier: goHelloWorld
    orgIdentifier: default
    tags: {}
    properties:
        ci:
            codebase:
                connectorRef: goHelloWorld
                build: <+input>
    stages:
        - stage:
              name: Build Test and Push
              identifier: Build_Test_and_Push
              type: CI
              spec:
                  cloneCodebase: true
                  infrastructure:
                      type: KubernetesDirect
                      spec:
                          connectorRef: org.GKEdefault
                          namespace: harness-build
                  execution:
                      steps:
                          - step:
                                type: Run
                                name: Run Unit Tests
                                identifier: Run_Unit_Tests
                                spec:
                                    connectorRef: org.Docker_Hub
                                    image: golang:1.15
                                    command: |-
                                        go get gotest.tools/gotestsum
                                        gotestsum --format=standard-verbose --junitfile unit-tests.xml || true
                                        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo
                                    reports:
                                        type: JUnit
                                        spec:
                                            paths:
                                                - "*.xml"
                                failureStrategies: []
                          - step:
                                type: BuildAndPushDockerRegistry
                                name: Build and push image to Docker Hub
                                identifier: Build_and_push_image_to_Docker_Hub
                                spec:
                                    connectorRef: org.Docker_Hub
                                    repo: rmailaender/gohelloworldserver
                                    tags:
                                        - <+pipeline.variables.dockerTag>
                                failureStrategies: []
        - stage:
              name: Integration tests
              identifier: Integration_tests
              type: CI
              spec:
                  cloneCodebase: false
                  infrastructure:
                      useFromStage: Build_Test_and_Push
                  execution:
                      steps:
                          - step:
                                type: Run
                                name: test connection to server
                                identifier: test_connection_to_server
                                spec:
                                    connectorRef: org.Docker_Hub
                                    image: curlimages/curl:7.73.0
                                    command: |-
                                        sleep 10
                                        curl localhost:8080
                                        curl localhost:8080?Hello!_I_am_a_nice_demo!
                  serviceDependencies:
                      - identifier: go_Server
                        name: go Server
                        type: Service
                        spec:
                            connectorRef: org.Docker_Hub
                            image: rmailaender/gohelloworldserver:<+pipeline.variables.dockerTag>
        - stage:
              name: Deploy to prod
              identifier: Deploy_to_prod
              description: ""
              type: Deployment
              spec:
                  serviceConfig:
                      serviceRef: goHelloWorld
                      serviceDefinition:
                          type: Kubernetes
                          spec:
                              variables: []
                              manifests:
                                  - manifest:
                                        identifier: Deployment
                                        type: K8sManifest
                                        spec:
                                            store:
                                                type: Github
                                                spec:
                                                    connectorRef: goHelloWorld
                                                    gitFetchType: Branch
                                                    paths:
                                                        - deployment.yaml
                                                    branch: main
                                            skipResourceVersioning: false
                                  - manifest:
                                        identifier: ValuesProd
                                        type: Values
                                        spec:
                                            store:
                                                type: Github
                                                spec:
                                                    connectorRef: goHelloWorld
                                                    gitFetchType: Branch
                                                    paths:
                                                        - valuesProd.yaml
                                                    branch: main
                              artifacts:
                                  primary:
                                      spec:
                                          connectorRef: org.Docker_Hub
                                          imagePath: rmailaender/gohelloworldserver
                                          tag: <+pipeline.variables.dockerTag>
                                      type: DockerRegistry
                  infrastructure:
                      environmentRef: Test
                      infrastructureDefinition:
                          type: KubernetesDirect
                          spec:
                              connectorRef: org.GKEdefault
                              namespace: goserver-prod
                              releaseName: release-<+INFRA_KEY>
                      allowSimultaneousDeployments: false
                  execution:
                      steps:
                          - stepGroup:
                                name: Canary Deployment
                                identifier: canaryDepoyment
                                steps:
                                    - step:
                                          name: Canary Deployment
                                          identifier: canaryDeployment
                                          type: K8sCanaryDeploy
                                          timeout: 10m
                                          spec:
                                              instanceSelection:
                                                  type: Count
                                                  spec:
                                                      count: 1
                                              skipDryRun: false
                                    - step:
                                          name: Canary Delete
                                          identifier: canaryDelete
                                          type: K8sCanaryDelete
                                          timeout: 10m
                                          spec: {}
                                rollbackSteps:
                                    - step:
                                          name: Canary Delete
                                          identifier: rollbackCanaryDelete
                                          type: K8sCanaryDelete
                                          timeout: 10m
                                          spec: {}
                          - stepGroup:
                                name: Primary Deployment
                                identifier: primaryDepoyment
                                steps:
                                    - step:
                                          name: Rolling Deployment
                                          identifier: rollingDeployment
                                          type: K8sRollingDeploy
                                          timeout: 10m
                                          spec:
                                              skipDryRun: false
                                          failureStrategies: []
                                rollbackSteps:
                                    - step:
                                          name: Rolling Rollback
                                          identifier: rollingRollback
                                          type: K8sRollingRollback
                                          timeout: 10m
                                          spec: {}
                      rollbackSteps: []
                  serviceDependencies: []
              tags: {}
              failureStrategies:
                  - onFailure:
                        errors:
                            - AllErrors
                        action:
                            type: StageRollback
              variables: []
              when:
                  pipelineStatus: Success
                  condition: <+pipeline.variables.branchpushed> =^ "main"
        - parallel:
              - stage:
                    name: Splunk Dashboard
                    identifier: Dashboards
                    description: ""
                    type: Deployment
                    spec:
                        serviceConfig:
                            useFromStage:
                                stage: Deploy_to_prod
                        infrastructure:
                            environmentRef: Test
                            infrastructureDefinition:
                                type: KubernetesDirect
                                spec:
                                    connectorRef: org.GKEdefault
                                    namespace: default
                                    releaseName: release-<+INFRA_KEY>
                            allowSimultaneousDeployments: false
                        execution:
                            steps:
                                - step:
                                      type: TerraformPlan
                                      name: Plan Splunk Dashboard
                                      identifier: Plan_Splunk_Dashboard
                                      spec:
                                          configuration:
                                              command: Apply
                                              configFiles:
                                                  store:
                                                      type: Github
                                                      spec:
                                                          gitFetchType: Branch
                                                          connectorRef: goHelloWorld
                                                          branch: main
                                                          folderPath: dashboards/splunk
                                              secretManagerRef: org.harnessSecretManager
                                              varFiles:
                                                  - varFile:
                                                        identifier: SplunkToken
                                                        spec:
                                                            content: |
                                                                splunkToken = "<+secrets.getValue("splunkToken")>"
                                                        type: Inline
                                          provisionerIdentifier: f6d4fe7634a3
                                      timeout: 10m
                                      failureStrategies: []
                                - step:
                                      type: TerraformApply
                                      name: Apply Splunk Dashboard
                                      identifier: Apply_Splunk_Dashboard
                                      spec:
                                          provisionerIdentifier: f6d4fe7634a3
                                          configuration:
                                              type: InheritFromPlan
                                      timeout: 10m
                            rollbackSteps:
                                - step:
                                      name: Rollback Rollout Deployment
                                      identifier: rollbackRolloutDeployment
                                      type: K8sRollingRollback
                                      timeout: 10m
                                      spec: {}
                        serviceDependencies: []
                    tags: {}
                    failureStrategies:
                        - onFailure:
                              errors:
                                  - AllErrors
                              action:
                                  type: StageRollback
                    when:
                        pipelineStatus: Success
                        condition: <+pipeline.variables.branchpushed> =^ "main"
              - stage:
                    name: Grafana Dashboard
                    identifier: Grafana_Dashboard
                    type: CI
                    spec:
                        cloneCodebase: true
                        infrastructure:
                            type: KubernetesDirect
                            spec:
                                connectorRef: org.GKEdefault
                                namespace: harness-build
                                automountServiceAccountToken: true
                        execution:
                            steps:
                                - step:
                                      type: Run
                                      name: Apply Grafana Dashboard
                                      identifier: Apply_Grafana_Dashboard
                                      spec:
                                          connectorRef: org.Docker_Hub
                                          image: golang
                                          shell: Sh
                                          command: |-
                                              go install -a github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest

                                              jb install https://github.com/grafana/grafonnet-lib/grafonnet

                                              # download the binary (adapt os and arch as needed)
                                              curl -fSL -o "/usr/local/bin/grr" "https://github.com/grafana/grizzly/releases/download/v0.2.0-beta3/grr-linux-amd64"

                                              # make it executable
                                              chmod a+x "/usr/local/bin/grr"

                                              grr apply dashboards/grafana/dashboards.jsonnet
                                          envVariables:
                                              GRAFANA_URL: <+secrets.getValue("GrafanaURL")>
                                      failureStrategies: []
                    when:
                        pipelineStatus: Success
                        condition: <+pipeline.variables.branchpushed> =^ "main"
        - stage:
              name: Release
              identifier: Release
              type: CI
              spec:
                  cloneCodebase: true
                  infrastructure:
                      useFromStage: Build_Test_and_Push
                  execution:
                      steps:
                          - step:
                                type: Run
                                name: Get newest version
                                identifier: DockerTag
                                spec:
                                    connectorRef: org.Docker_Hub
                                    image: rmailaender/cicdsemanticrelease
                                    shell: Bash
                                    command: |
                                        npx semantic-release --no-ci
                                        test -e .VERSION || (echo NO_RELEASE > .VERSION)
                                        export NEXT_VERSION=$(cat .VERSION)
                                    envVariables:
                                        DOCKER_REGISTRY_USER: <+secrets.getValue("DOCKER_USERNAME")>
                                        DOCKER_REGISTRY_PASSWORD: <+secrets.getValue("DOCKER_PASSWORD")>
                                        GITHUB_TOKEN: <+secrets.getValue("githubtoken")>
                                    outputVariables:
                                        - name: NEXT_VERSION
                          - step:
                                type: BuildAndPushDockerRegistry
                                name: Push version tags
                                identifier: Push_version_tags
                                spec:
                                    connectorRef: org.Docker_Hub
                                    repo: rmailaender/gohelloworldserver
                                    tags:
                                        - <+steps.DockerTag.output.outputVariables.NEXT_VERSION>
                                failureStrategies: []
                                when:
                                    stageStatus: Success
                                    condition: <+steps.DockerTag.output.outputVariables.NEXT_VERSION> != "NO_RELEASE"
              when:
                  pipelineStatus: Success
                  condition: <+pipeline.variables.branchpushed> =^ "main"
    flowControl:
        barriers: []
    variables:
        - name: branchpushed
          type: String
          value: <+input>.allowedValues(main-,feature-)
        - name: identifier
          type: String
          value: <+input>
        - name: dockerTag
          type: String
          value: <+<+pipeline.variables.branchpushed>.concat(<+pipeline.variables.identifier>)>
